{"basic_builder": {"appname": "TA-dell-emc-powerstore-add-on-for-splunk", "friendly_name": "Dell EMC PowerStore Add-on for Splunk", "version": "1.0.0", "author": "Kyle Prins", "description": "", "theme": "#0076CE", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAJhklEQVR4Xu2cbXBU1RnHf+fcm928kReSTQISCKRYJAZpVRREC/g2xRkbVMBOxZG26lSrteoIigV1nFHH0dqO/dA3oBXLINVRaRQhI2q01qqICBjMCwTyshsC5H2z2b33tufsxiQYQGa/nsuXnc29zznnd/7n/zxP5hLBA596mGtUAraQCAPo5OowgE5zcgwgAyg5czUKMgoyCkqOgFFQcvyMBxkFGQUlR8AoKDl+xoOMgoyCkiNgFJQcP+NBRkFGQckRMApKjp/xIKMgo6DkCBgFJcfPeJBRkFFQcgSMgpLjd2oPEiA98ISAEa83eHiCEd8JBEKom11A4KFuUM96CDdxq4qj7ksEGwopEFLguerZoUvdOXh9/Ul46BE8NYLEw8HDGjmZ4TES81RPCb2O+NzE0KRGLu0EnqcGJEEODu2CFCq4+ifwvG++EKKXLySeoufF1ANxWOpekQKeg1DL81QMfbP+rAax8HD192qx6qlB/lKHGYTq6jlEka6KYOEJG0kMR+/YiVd8fPVzhFSIdFApPaRrEdOzGLkpJ0Y4JSBbetxYHiBDxnClpRfUGY5SeyRCzdF+wo4aIDExIShKs7n3sgAzx/m549Um6juiekIp0mNpea7e76rabprD6hlHwykdm87lJWkc7HLYVtc5bH5qJRYXF/kozvERdeMjCc+lPyb4oCmMwOGKKRlUftVHv+PqrRtCKzgnkMqEMZKqA316k1Jsi/MCPqbm+8lJt2jrjrIrGKH+2MBJz+EpAfksQcPKcxmfZeN6aidcFJNgr8vGne08tSPIsf64ks4N+Hly4VksmJpJTTDM8s3NNHWEORaOku7z0bDibKT0cf36Ot491BufkOXx43NyefGmyWyp6aFi7X48qTSrSWBh8fD8Apo7Bqg/GtGCU1D7HcneUJjiHIt375jGNX+t5aOmCJ5Q0OMHU6n4jeUl9EU9lm5qwnaj3HtpERkSqhp76el3GZeZQkV5Dr+tDrLvSAQtyjM5Yn5b0LCinCy/4JGtjewNRbigOJP75xeQaVs88GaI31W3cVlJBhtumsS4MRav7Onh5g21zJwwhk3LJvNc9VH+9O8Q+1aVkyYE162r5b3Dfd8E9GUPFeuGAVLnKuawZl4er9WE2RUKawVLKfHcqFbX2Xnp/LGiiL1tLne+egAsiXBcLAHTC9JZv+Qsttf28NBbh7lkcgHXTs9i5ZY6HEvZQAo2UeZOTGfFgkKuWXsIVxnuMN9TkzyNgtCAMnyS69bX8c6BPr2zl5dms2V5Ca3dUZ59p4PVV+ZhW5Ln3j/CC5+0s3BaNquvKsSyLP5QHWTtx8f59NdnI7BYtHYIkFBHb3ou/1g2hS37ukcCUt4gfayam0NlTS+7Q/1x/1N2JuIJYXqen5svymNGUQb3bTnMvvY+8CS2EPzl+glUfdXLtPFpPFLVyp0XjGVnsI/3G3twsZFeDBeJLWFeaRZVtR3EHXfk9a0AZfoEFevqeadR7bxHiuNSffc0ZhVnMOC6HOmOcsfmQ3zUGuGZhYUsmZlLa5fLXa8282FjL0/8sIhbZuXT1e9+DUgdAyk8bijLZeOogMASLo9dMYFUn6ClO6ZnbnsOTV0xXtnbQWlOKku/P5b/NHRx9Tk53POvFvCizChI55c/KOKJra38dE6AR7a3sHJ+Ea/tPs7u9gGEpzLfsAypjH+UpPOtFTQaoPfumsaFEzMIu+Bzozz/QTsXTMrioonp7G/r59bNTfSGIzy/uIS5k9IQ0qIzfAaAhJK3x+p5RYS6Ihw4pjKRICYsuvsifBaKMDXXZvH5eazZGuRvS4p5tCrEwWP93Da7kMb2XmqORPjZxYWnBXRShz7dEfNbUL+inEyfZNH6OnY0hnUWueo7Obx2y0RauiM8u6ODVVcFCGT6dJZ6addx7nm9mfmlaay5upiSbIuNn3ewaMZYYo5LxboGPmjq1maqEvrismxevKmUyppOrl1Xpz1GpWM1jmvZPDQ3l8qaHr5QR0ydANeNG7nnUZ7nZ+n5ufxme4gby3KwpMum3Z08uXA8z7zXhk9Ibp2dx6PbWrn9ogB7WsO829iBiy9ehghBmgU3zCzkhU9C8bLjTI5YqgK0cgbZPsFjbx3my7YIF07K4leX5pDht7m/sp3fv3+YSyZmsXlZKQVjbI70DbDpsy5un5OPLVzuf72ZP//3KA0PlpOa4vH41jb2tvbgSQcHi9w0HxuWlfDxwTCPbz2Ia6fobLKnrY/WrgirLhvHlv097Aoqk07UZa6DlBbT8/3ceP5YHt4eYkqWzd1zcvj7rj4qysaw5u0QkzMky+cUsGZbkNnFfq4tL+LByjpdU8XcVKR0ubI0nTtnjWXRhsM42qTPwIP8EuofLGf8GBtV4klP1RrQ1O2wcddRnnq7hY4BkK7ku/kWTy+cwIKp2aSmwN5gmJVvhnhjfyeptqDxoXMJpNu4ynxdiSc9IlGXW146xKafTMbTO2ppE3acGD9/uUWP8fCCokSaH9Ce5QADjuSLYB+TsuyvAdnAk1eP45LJGfzi5UN8HgozMcvPbbPzWb2tWRe5980pIN0v2HGgl94BleYtflSWy+M7QtQfD2uDPyNAajlLygOkq0JRDBaKMeqORvjqeIRwTOHShbsGF0izuPfSAOeN93NfZZC69gFinkOKFCwuyyHVVocwnkrVp6iQVNf3MH9KRuJbZZbxKVY39lDXGWVWoZ/ibD+xwSLFc7TvfdgU1jFK8/zsbOnXz0zN8/G9Ij//3Net6zVlDdPyfOwMhXFdgV9KygIpTM1PIzfNoqVngD3BCA2qoI03MGcGCKncQO0NCDfey6gF6rnG8+1QQN23JRoC9fK15wwV8epWmRIv+Yd1TaoSjkeMj6F/pnosPY6yG5XqJepV7qFWQ9UwSkeq/1D3WniOOqwejtpE5WyeWnD8EpaF58YS48QjxTOo0ExUPks0Pt+Ao744ZZrX9Ybr6QJKDO91Ei3U8Ii6BdR9mO54EmlUNbXKcBNNrBgEoYjFY6reSvW4CTxDoPCQiXgjdzbRBOuqRR/YxHhq8XFww1O4shVXJnq5wQ57MK4OdWIjPpKT+Y3iqLoZ+tIAMoBOQ8AAMoCSI2AUlBw/Y9JGQUZByREwCkqOn/EgoyCjoOQIGAUlx894kFGQUVByBIyCkuNnPMgoyCgoOQJGQcnxMx5kFGQUlBwBo6Dk+BkPOgm/wfcQ1EvG5o+8jQYp8V6Gft3BXvGZ+TOBo0BS/0vA+v8LD/8DcsWFDH+oHqEAAAAASUVORK5CYII=", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADIklEQVRYR+2WS0hcVxjHf+fcuTPXUZNUEzWjFQUfkCaohSxEah+LQgsuStd9CCUEpEU0dBFIk0UbCiEIIUh2XYSWLvraTOimYOsiJX1Ea7E1jTEda8dHTCTOI86de085d6Y+SOLtTgv3bM49fN85/M//+/+/ewTv/qTYRUMEgHyqETDkJ9eAoYAhPwb84oGGAob8GPCL73INCZCu8C6hhIui8O1NSgJ5HQAh0CtXh5RCiUKeEIa3BoXeXcjQmcUhlA6BlKB0zCjOm1I2/+2tkOJASRhXKZKreYrYiEhB3Z4Q0ys20RBETYM7WQcpBAdLJXMpxzvRlFCtE4DVnINlSBazjocBpYiVmcynbRSSthqTyUWbnLv19bOlZM81lvJVbxMTyQxH60upODVOe3Upo2830z70B00VkqytOP1ijM7hKSpLJBMDTxH7YMID0Vlbwve300gpcIVktK+JNz5NML2yhgmMDRzi8PnfGHopRn98lrpyEykMEqncBombGdKAhnqepOPC75x5oYb+Z6txHGj5cJzZ99o4eSVJNByi51A5XcNTPGFJfj1xmIPv/+Id2FUb8W6tS5jJ23xzrJVriQcMfv0n3TVlvPp0JR9fv8MPf2W9yhe0oTwJrFd1W0Dd+7HCJiEJLWcniL/VRFV5mBtLa48FNL6Q9+SWdfOMHGvl5JV5rt5a5fM365lZdvnk+hI/zj34b4Ceb4zyZW8zk8ksHfVRKk6N0VZVwrfvtJLLORz/4m8WUzafvdbA2FyGyz+vcPGVOq4l0iynbc6NLHB1Jo2QWviS7/qaeebSTeKvN9Dz0QznemIMxucYermOgXiCxn0R0g7Mp+xHM2QZLpVWBOW6JDP5dfdEJMT2mty+l8MyBBVWQbgp26HMNDwb6j1Law5Vxdh9J0/YMLibdii3DO6vOeyJGKzmCk49UmUxuZQj77ntMS7T9pZF0RfM+69dtU31t3aTQCot2kJTEFoM2tlKW123A+Wlbnin2C68JAnC2bC+PsHdDtAWrDuz2OWdemdI2UZDAaCHGQg05KeKgKGAIT8G/OKBhv5XDOnXwz/Y8W19opqm+AAAAABJRU5ErkJggg==", "visible": true, "tab_version": "3.0.1", "tab_build_no": "2", "build_no": 2}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "dell:powerstore", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "dell_powerstore", "title": "dell:powerstore", "description": "", "type": "customized", "parameters": [{"name": "ip_address", "label": "IP Address", "help_string": "Cluster IP Address of PowerStore", "required": true, "format_type": "text", "default_value": "", "placeholder": "xxx.xxx.xxx.xxx", "type": "text", "value": "192.168.202.60"}, {"name": "global_account", "label": "Global Account", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "compute", "label": "Compute", "help_string": "Manage host configurations, virtual machines and VMware integration.\n\n  ", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": false}, {"name": "migration", "label": "Migration", "help_string": "Manage data import and data migration from remote systems.", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": false}, {"name": "monitoring", "label": "Monitoring", "help_string": "View event logs and alerts", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": false}, {"name": "protection", "label": "Protection", "help_string": "Manage replication and data protection rules", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": false}, {"name": "settings", "label": "Settings", "help_string": "Configure general settings on the system including: Networking, Licensing, Updates", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": false}, {"name": "storage", "label": "Storage", "help_string": "Storage configuration of the system: Create delete storage resources, Configure NAS servers", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": false}, {"name": "support", "label": "Support", "help_string": "Manage service user credentials, perform service actions on the system", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": false}, {"name": "system_and_hardware", "label": "System and Hardware", "help_string": "Manage hardware, view component health status, change cluster configuration", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}], "data_inputs_options": [{"type": "customized_var", "name": "ip_address", "title": "IP Address", "description": "Cluster IP Address of PowerStore", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "xxx.xxx.xxx.xxx"}, {"type": "customized_var", "name": "global_account", "title": "Global Account", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "compute", "title": "Compute", "description": "Manage host configurations, virtual machines and VMware integration.\n\n  ", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "migration", "title": "Migration", "description": "Manage data import and data migration from remote systems.", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "monitoring", "title": "Monitoring", "description": "View event logs and alerts", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "protection", "title": "Protection", "description": "Manage replication and data protection rules", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "settings", "title": "Settings", "description": "Configure general settings on the system including: Networking, Licensing, Updates", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "storage", "title": "Storage", "description": "Storage configuration of the system: Create delete storage resources, Configure NAS servers", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "support", "title": "Support", "description": "Manage service user credentials, perform service actions on the system", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "system_and_hardware", "title": "System and Hardware", "description": "Manage hardware, view component health status, change cluster configuration", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}], "code": "\n# encoding = utf-8\n\nimport datetime\nimport json\nimport os\nimport requests\nimport sys\nimport time\nfrom requests.auth import HTTPBasicAuth\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # ip_address = definition.parameters.get('ip_address', None)\n    # global_account = definition.parameters.get('global_account', None)\n    # compute = definition.parameters.get('compute', None)\n    pass\n\ndef collect_events(helper, ew):\n        \n    # Get input settings\n    global_account = helper.get_arg('global_account')\n    username = global_account['username']\n    password = global_account['password']\n    ip_address = helper.get_arg(\"ip_address\")\n\n    # Get what to collect\n    compute  = helper.get_arg('compute')\n    migration  = helper.get_arg('migration')\n    monitoring  = helper.get_arg('monitoring')\n    protection  = helper.get_arg('protection')\n    settings  = helper.get_arg('settings')\n    storage  = helper.get_arg('storage')\n    support  = helper.get_arg('support')\n    system_and_hardware  = helper.get_arg('system_and_hardware')\n\n\n    helper.log_info(\"PowerStore START: Beginning collection for: \" + ip_address)\n    start = time.time()\n    \n######################    \n# Compute Collection #\n######################\n    if compute is True:\n        helper.log_info(\"Dell PowerStore - Compute: Trying Compute collection for: \" + ip_address)\n        #host api call\n        try:\n            helper.log_info(\"Dell PowerStore - Compute: host beginning data collection for: \" + ip_address)\n            host_url = 'https://' + ip_address + '/api/rest/host?select=*'\n            host_response = requests.get(host_url, auth=HTTPBasicAuth(username, password), verify=False)\n            host_path = json.loads(host_response.text)\n            host_count = len(host_path)\n            helper.log_info(\"Dell PowerStore - Compute: \" + str(host_count) + \" host counted for: \" + ip_address)\n            host_counter = 0\n            #iterate throught the payload into events\n            while host_counter < host_count:\n                host_path = json.loads(host_response.text)[host_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:host\", data=json.dumps(host_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Compute: host event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Compute: host CANNOT write event for: \" + ip_address)\n                host_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Compute: host could not call api for: \" + ip_address)\n\n        #host_group api call\n        try:\n            helper.log_info(\"Dell PowerStore - Compute: host_group beginning data collection for: \" + ip_address)\n            host_group_url = 'https://' + ip_address + '/api/rest/host_group?select=*'\n            host_group_response = requests.get(host_group_url, auth=HTTPBasicAuth(username, password), verify=False)\n            host_group_path = json.loads(host_group_response.text)\n            host_group_count = len(host_group_path)\n            helper.log_info(\"Dell PowerStore - Compute: \" + str(host_group_count) + \" host_group counted for: \" + ip_address)\n            host_group_counter = 0\n            #iterate throught the payload into events\n            while host_group_counter < host_group_count:\n                host_group_path = json.loads(host_group_response.text)[host_group_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:host_group\", data=json.dumps(host_group_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Compute: host_group event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Compute: host_group CANNOT write event for: \" + ip_address)\n                host_group_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Compute: host_group could not call api for: \" + ip_address)\n        \n        #host_volume_mapping api call\n        try:\n            helper.log_info(\"Dell PowerStore - Compute: host_volume_mapping beginning data collection for: \" + ip_address)\n            host_volume_mapping_url = 'https://' + ip_address + '/api/rest/host_volume_mapping?select=*'\n            host_volume_mapping_response = requests.get(host_volume_mapping_url, auth=HTTPBasicAuth(username, password), verify=False)\n            host_volume_mapping_path = json.loads(host_volume_mapping_response.text)\n            host_volume_mapping_count = len(host_volume_mapping_path)\n            helper.log_info(\"Dell PowerStore - Compute: \" + str(host_volume_mapping_count) + \" host_volume_mapping counted for: \" + ip_address)\n            host_volume_mapping_counter = 0\n            #iterate throught the payload into events\n            while host_volume_mapping_counter < host_volume_mapping_count:\n                host_volume_mapping_path = json.loads(host_volume_mapping_response.text)[host_volume_mapping_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:host_volume_mapping\", data=json.dumps(host_volume_mapping_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Compute: host_volume_mapping event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Compute: host_volume_mapping CANNOT write event for: \" + ip_address)\n                host_volume_mapping_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Compute: host_volume_mapping could not call api for: \" + ip_address)\n\n        #host_virtual_volume_mapping api call\n        try:\n            helper.log_info(\"Dell PowerStore - Compute: host_virtual_volume_mapping beginning data collection for: \" + ip_address)\n            host_virtual_volume_mapping_url = 'https://' + ip_address + '/api/rest/host_virtual_volume_mapping?select=*'\n            host_virtual_volume_mapping_response = requests.get(host_virtual_volume_mapping_url, auth=HTTPBasicAuth(username, password), verify=False)\n            host_virtual_volume_mapping_path = json.loads(host_virtual_volume_mapping_response.text)\n            host_virtual_volume_mapping_count = len(host_virtual_volume_mapping_path)\n            helper.log_info(\"Dell PowerStore - Compute: \" + str(host_virtual_volume_mapping_count) + \" host_virtual_volume_mapping counted for: \" + ip_address)\n            host_virtual_volume_mapping_counter = 0\n            #iterate throught the payload into events\n            while host_virtual_volume_mapping_counter < host_virtual_volume_mapping_count:\n                host_virtual_volume_mapping_path = json.loads(host_virtual_volume_mapping_response.text)[host_virtual_volume_mapping_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:host_virtual_volume_mapping\", data=json.dumps(host_virtual_volume_mapping_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Compute: host_virtual_volume_mapping event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Compute: host_virtual_volume_mapping CANNOT write event for: \" + ip_address)\n                host_virtual_volume_mapping_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Compute: host_virtual_volume_mapping could not call api for: \" + ip_address)\n\n        #discovered_initiator api call\n        try:\n            helper.log_info(\"Dell PowerStore - Compute: discovered_initiator beginning data collection for: \" + ip_address)\n            discovered_initiator_url = 'https://' + ip_address + '/api/rest/discovered_initiator?select=*'\n            discovered_initiator_response = requests.get(discovered_initiator_url, auth=HTTPBasicAuth(username, password), verify=False)\n            discovered_initiator_path = json.loads(discovered_initiator_response.text)\n            discovered_initiator_count = len(discovered_initiator_path)\n            helper.log_info(\"Dell PowerStore - Compute: \" + str(discovered_initiator_count) + \" discovered_initiator counted for: \" + ip_address)\n            discovered_initiator_counter = 0\n            #iterate throught the payload into events\n            while discovered_initiator_counter < discovered_initiator_count:\n                discovered_initiator_path = json.loads(discovered_initiator_response.text)[discovered_initiator_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:discovered_initiator\", data=json.dumps(discovered_initiator_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Compute: discovered_initiator event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Compute: discovered_initiator CANNOT write event for: \" + ip_address)\n                discovered_initiator_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Compute: discovered_initiator could not call api for: \" + ip_address)\n\n        #vcenter api call\n        try:\n            helper.log_info(\"Dell PowerStore - Compute: vcenter beginning data collection for: \" + ip_address)\n            vcenter_url = 'https://' + ip_address + '/api/rest/vcenter?select=*'\n            vcenter_response = requests.get(vcenter_url, auth=HTTPBasicAuth(username, password), verify=False)\n            vcenter_path = json.loads(vcenter_response.text)\n            vcenter_count = len(vcenter_path)\n            helper.log_info(\"Dell PowerStore - Compute: \" + str(vcenter_count) + \" vcenter counted for: \" + ip_address)\n            vcenter_counter = 0\n            #iterate throught the payload into events\n            while vcenter_counter < vcenter_count:\n                vcenter_path = json.loads(vcenter_response.text)[vcenter_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:vcenter\", data=json.dumps(vcenter_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Compute: vcenter event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Compute: vcenter CANNOT write event for: \" + ip_address)\n                vcenter_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Compute: vcenter could not call api for: \" + ip_address)\n\n        #virtual_machine api call\n        try:\n            helper.log_info(\"Dell PowerStore - Compute: virtual_machine beginning data collection for: \" + ip_address)\n            virtual_machine_url = 'https://' + ip_address + '/api/rest/virtual_machine?select=*'\n            virtual_machine_response = requests.get(virtual_machine_url, auth=HTTPBasicAuth(username, password), verify=False)\n            virtual_machine_path = json.loads(virtual_machine_response.text)\n            virtual_machine_count = len(virtual_machine_path)\n            helper.log_info(\"Dell PowerStore - Compute: \" + str(virtual_machine_count) + \" virtual_machine counted for: \" + ip_address)\n            virtual_machine_counter = 0\n            #iterate throught the payload into events\n            while virtual_machine_counter < virtual_machine_count:\n                virtual_machine_path = json.loads(virtual_machine_response.text)[virtual_machine_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:virtual_machine\", data=json.dumps(virtual_machine_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Compute: virtual_machine event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Compute: virtual_machine CANNOT write event for: \" + ip_address)\n                virtual_machine_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Compute: virtual_machine could not call api for: \" + ip_address)\n\n########################    \n# Migration Collection #\n########################\n    if migration is True:\n        helper.log_info(\"Dell PowerStore - Migration: Trying Compute collection for: \" + ip_address)\n\n        #import_host_initiator api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_host_initiator beginning data collection for: \" + ip_address)\n            import_host_initiator_url = 'https://' + ip_address + '/api/rest/import_host_initiator?select=*'\n            import_host_initiator_response = requests.get(import_host_initiator_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_host_initiator_path = json.loads(import_host_initiator_response.text)\n            import_host_initiator_count = len(import_host_initiator_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_host_initiator_count) + \" import_host_initiator counted for: \" + ip_address)\n            import_host_initiator_counter = 0\n            #iterate throught the payload into events\n            while import_host_initiator_counter < import_host_initiator_count:\n                import_host_initiator_path = json.loads(import_host_initiator_response.text)[import_host_initiator_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_host_initiator\", data=json.dumps(import_host_initiator_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_host_initiator event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_host_initiator CANNOT write event for: \" + ip_address)\n                import_host_initiator_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_host_initiator could not call api for: \" + ip_address)\n\n\n        #import_host_system api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_host_system beginning data collection for: \" + ip_address)\n            import_host_system_url = 'https://' + ip_address + '/api/rest/import_host_system?select=*'\n            import_host_system_response = requests.get(import_host_system_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_host_system_path = json.loads(import_host_system_response.text)\n            import_host_system_count = len(import_host_system_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_host_system_count) + \" import_host_system counted for: \" + ip_address)\n            import_host_system_counter = 0\n            #iterate throught the payload into events\n            while import_host_system_counter < import_host_system_count:\n                import_host_system_path = json.loads(import_host_system_response.text)[import_host_system_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_host_system\", data=json.dumps(import_host_system_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_host_system event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_host_system CANNOT write event for: \" + ip_address)\n                import_host_system_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_host_system could not call api for: \" + ip_address)\n\n\n        #import_host_volume api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_host_volume beginning data collection for: \" + ip_address)\n            import_host_volume_url = 'https://' + ip_address + '/api/rest/import_host_volume?select=*'\n            import_host_volume_response = requests.get(import_host_volume_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_host_volume_path = json.loads(import_host_volume_response.text)\n            import_host_volume_count = len(import_host_volume_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_host_volume_count) + \" import_host_volume counted for: \" + ip_address)\n            import_host_volume_counter = 0\n            #iterate throught the payload into events\n            while import_host_volume_counter < import_host_volume_count:\n                import_host_volume_path = json.loads(import_host_volume_response.text)[import_host_volume_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_host_volume\", data=json.dumps(import_host_volume_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_host_volume event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_host_volume CANNOT write event for: \" + ip_address)\n                import_host_volume_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_host_volume could not call api for: \" + ip_address)\n\n\n        #import_psgroup api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_psgroup beginning data collection for: \" + ip_address)\n            import_psgroup_url = 'https://' + ip_address + '/api/rest/import_psgroup?select=*'\n            import_psgroup_response = requests.get(import_psgroup_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_psgroup_path = json.loads(import_psgroup_response.text)\n            import_psgroup_count = len(import_psgroup_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_psgroup_count) + \" import_psgroup counted for: \" + ip_address)\n            import_psgroup_counter = 0\n            #iterate throught the payload into events\n            while import_psgroup_counter < import_psgroup_count:\n                import_psgroup_path = json.loads(import_psgroup_response.text)[import_psgroup_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_psgroup\", data=json.dumps(import_psgroup_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_psgroup event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_psgroup CANNOT write event for: \" + ip_address)\n                import_psgroup_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_psgroup could not call api for: \" + ip_address)\n\n\n        #import_psgroup_volume api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_psgroup_volume beginning data collection for: \" + ip_address)\n            import_psgroup_volume_url = 'https://' + ip_address + '/api/rest/import_psgroup_volume?select=*'\n            import_psgroup_volume_response = requests.get(import_psgroup_volume_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_psgroup_volume_path = json.loads(import_psgroup_volume_response.text)\n            import_psgroup_volume_count = len(import_psgroup_volume_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_psgroup_volume_count) + \" import_psgroup_volume counted for: \" + ip_address)\n            import_psgroup_volume_counter = 0\n            #iterate throught the payload into events\n            while import_psgroup_volume_counter < import_psgroup_volume_count:\n                import_psgroup_volume_path = json.loads(import_psgroup_volume_response.text)[import_psgroup_volume_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_psgroup_volume\", data=json.dumps(import_psgroup_volume_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_psgroup_volume event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_psgroup_volume CANNOT write event for: \" + ip_address)\n                import_psgroup_volume_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_psgroup_volume could not call api for: \" + ip_address)\n\n\n        #import_session api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_session beginning data collection for: \" + ip_address)\n            import_session_url = 'https://' + ip_address + '/api/rest/import_session?select=*'\n            import_session_response = requests.get(import_session_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_session_path = json.loads(import_session_response.text)\n            import_session_count = len(import_session_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_session_count) + \" import_session counted for: \" + ip_address)\n            import_session_counter = 0\n            #iterate throught the payload into events\n            while import_session_counter < import_session_count:\n                import_session_path = json.loads(import_session_response.text)[import_session_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_session\", data=json.dumps(import_session_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_session event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_session CANNOT write event for: \" + ip_address)\n                import_session_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_session could not call api for: \" + ip_address)\n\n\n        #import_storage_center api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_storage_center beginning data collection for: \" + ip_address)\n            import_storage_center_url = 'https://' + ip_address + '/api/rest/import_storage_center?select=*'\n            import_storage_center_response = requests.get(import_storage_center_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_storage_center_path = json.loads(import_storage_center_response.text)\n            import_storage_center_count = len(import_storage_center_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_storage_center_count) + \" import_storage_center counted for: \" + ip_address)\n            import_storage_center_counter = 0\n            #iterate throught the payload into events\n            while import_storage_center_counter < import_storage_center_count:\n                import_storage_center_path = json.loads(import_storage_center_response.text)[import_storage_center_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_storage_center\", data=json.dumps(import_storage_center_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_storage_center event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_storage_center CANNOT write event for: \" + ip_address)\n                import_storage_center_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_storage_center could not call api for: \" + ip_address)\n\n\n        #import_storage_center_consistency_group api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_storage_center_consistency_group beginning data collection for: \" + ip_address)\n            import_storage_center_consistency_group_url = 'https://' + ip_address + '/api/rest/import_storage_center_consistency_group?select=*'\n            import_storage_center_consistency_group_response = requests.get(import_storage_center_consistency_group_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_storage_center_consistency_group_path = json.loads(import_storage_center_consistency_group_response.text)\n            import_storage_center_consistency_group_count = len(import_storage_center_consistency_group_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_storage_center_consistency_group_count) + \" import_storage_center_consistency_group counted for: \" + ip_address)\n            import_storage_center_consistency_group_counter = 0\n            #iterate throught the payload into events\n            while import_storage_center_consistency_group_counter < import_storage_center_consistency_group_count:\n                import_storage_center_consistency_group_path = json.loads(import_storage_center_consistency_group_response.text)[import_storage_center_consistency_group_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_storage_center_consistency_group\", data=json.dumps(import_storage_center_consistency_group_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_storage_center_consistency_group event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_storage_center_consistency_group CANNOT write event for: \" + ip_address)\n                import_storage_center_consistency_group_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_storage_center_consistency_group could not call api for: \" + ip_address)\n\n\n        #import_storage_center_volume api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_storage_center_volume beginning data collection for: \" + ip_address)\n            import_storage_center_volume_url = 'https://' + ip_address + '/api/rest/import_storage_center_volume?select=*'\n            import_storage_center_volume_response = requests.get(import_storage_center_volume_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_storage_center_volume_path = json.loads(import_storage_center_volume_response.text)\n            import_storage_center_volume_count = len(import_storage_center_volume_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_storage_center_volume_count) + \" import_storage_center_volume counted for: \" + ip_address)\n            import_storage_center_volume_counter = 0\n            #iterate throught the payload into events\n            while import_storage_center_volume_counter < import_storage_center_volume_count:\n                import_storage_center_volume_path = json.loads(import_storage_center_volume_response.text)[import_storage_center_volume_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_storage_center_volume\", data=json.dumps(import_storage_center_volume_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_storage_center_volume event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_storage_center_volume CANNOT write event for: \" + ip_address)\n                import_storage_center_volume_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_storage_center_volume could not call api for: \" + ip_address)\n\n\n        #import_unity api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_unity beginning data collection for: \" + ip_address)\n            import_unity_url = 'https://' + ip_address + '/api/rest/import_unity?select=*'\n            import_unity_response = requests.get(import_unity_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_unity_path = json.loads(import_unity_response.text)\n            import_unity_count = len(import_unity_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_unity_count) + \" import_unity counted for: \" + ip_address)\n            import_unity_counter = 0\n            #iterate throught the payload into events\n            while import_unity_counter < import_unity_count:\n                import_unity_path = json.loads(import_unity_response.text)[import_unity_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_unity\", data=json.dumps(import_unity_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_unity event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_unity CANNOT write event for: \" + ip_address)\n                import_unity_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_unity could not call api for: \" + ip_address)\n\n\n        #import_unity_consistency_group api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_unity_consistency_group beginning data collection for: \" + ip_address)\n            import_unity_consistency_group_url = 'https://' + ip_address + '/api/rest/import_unity_consistency_group?select=*'\n            import_unity_consistency_group_response = requests.get(import_unity_consistency_group_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_unity_consistency_group_path = json.loads(import_unity_consistency_group_response.text)\n            import_unity_consistency_group_count = len(import_unity_consistency_group_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_unity_consistency_group_count) + \" import_unity_consistency_group counted for: \" + ip_address)\n            import_unity_consistency_group_counter = 0\n            #iterate throught the payload into events\n            while import_unity_consistency_group_counter < import_unity_consistency_group_count:\n                import_unity_consistency_group_path = json.loads(import_unity_consistency_group_response.text)[import_unity_consistency_group_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_unity_consistency_group\", data=json.dumps(import_unity_consistency_group_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_unity_consistency_group event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_unity_consistency_group CANNOT write event for: \" + ip_address)\n                import_unity_consistency_group_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_unity_consistency_group could not call api for: \" + ip_address)\n\n\n        #import_unity_volume api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_unity_volume beginning data collection for: \" + ip_address)\n            import_unity_volume_url = 'https://' + ip_address + '/api/rest/import_unity_volume?select=*'\n            import_unity_volume_response = requests.get(import_unity_volume_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_unity_volume_path = json.loads(import_unity_volume_response.text)\n            import_unity_volume_count = len(import_unity_volume_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_unity_volume_count) + \" import_unity_volume counted for: \" + ip_address)\n            import_unity_volume_counter = 0\n            #iterate throught the payload into events\n            while import_unity_volume_counter < import_unity_volume_count:\n                import_unity_volume_path = json.loads(import_unity_volume_response.text)[import_unity_volume_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_unity_volume\", data=json.dumps(import_unity_volume_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_unity_volume event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_unity_volume CANNOT write event for: \" + ip_address)\n                import_unity_volume_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_unity_volume could not call api for: \" + ip_address)\n\n\n        #import_vnx_array api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_vnx_array beginning data collection for: \" + ip_address)\n            import_vnx_array_url = 'https://' + ip_address + '/api/rest/import_vnx_array?select=*'\n            import_vnx_array_response = requests.get(import_vnx_array_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_vnx_array_path = json.loads(import_vnx_array_response.text)\n            import_vnx_array_count = len(import_vnx_array_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_vnx_array_count) + \" import_vnx_array counted for: \" + ip_address)\n            import_vnx_array_counter = 0\n            #iterate throught the payload into events\n            while import_vnx_array_counter < import_vnx_array_count:\n                import_vnx_array_path = json.loads(import_vnx_array_response.text)[import_vnx_array_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_vnx_array\", data=json.dumps(import_vnx_array_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_vnx_array event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_vnx_array CANNOT write event for: \" + ip_address)\n                import_vnx_array_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_vnx_array could not call api for: \" + ip_address)\n\n\n        #import_vnx_consistency_group api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_vnx_consistency_group beginning data collection for: \" + ip_address)\n            import_vnx_consistency_group_url = 'https://' + ip_address + '/api/rest/import_vnx_consistency_group?select=*'\n            import_vnx_consistency_group_response = requests.get(import_vnx_consistency_group_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_vnx_consistency_group_path = json.loads(import_vnx_consistency_group_response.text)\n            import_vnx_consistency_group_count = len(import_vnx_consistency_group_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_vnx_consistency_group_count) + \" import_vnx_consistency_group counted for: \" + ip_address)\n            import_vnx_consistency_group_counter = 0\n            #iterate throught the payload into events\n            while import_vnx_consistency_group_counter < import_vnx_consistency_group_count:\n                import_vnx_consistency_group_path = json.loads(import_vnx_consistency_group_response.text)[import_vnx_consistency_group_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_vnx_consistency_group\", data=json.dumps(import_vnx_consistency_group_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_vnx_consistency_group event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_vnx_consistency_group CANNOT write event for: \" + ip_address)\n                import_vnx_consistency_group_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_vnx_consistency_group could not call api for: \" + ip_address)\n\n\n        #import_vnx_volume api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: import_vnx_volume beginning data collection for: \" + ip_address)\n            import_vnx_volume_url = 'https://' + ip_address + '/api/rest/import_vnx_volume?select=*'\n            import_vnx_volume_response = requests.get(import_vnx_volume_url, auth=HTTPBasicAuth(username, password), verify=False)\n            import_vnx_volume_path = json.loads(import_vnx_volume_response.text)\n            import_vnx_volume_count = len(import_vnx_volume_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(import_vnx_volume_count) + \" import_vnx_volume counted for: \" + ip_address)\n            import_vnx_volume_counter = 0\n            #iterate throught the payload into events\n            while import_vnx_volume_counter < import_vnx_volume_count:\n                import_vnx_volume_path = json.loads(import_vnx_volume_response.text)[import_vnx_volume_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:import_vnx_volume\", data=json.dumps(import_vnx_volume_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: import_vnx_volume event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: import_vnx_volume CANNOT write event for: \" + ip_address)\n                import_vnx_volume_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: import_vnx_volume could not call api for: \" + ip_address)\n\n\n        #migration_recommendation api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: migration_recommendation beginning data collection for: \" + ip_address)\n            migration_recommendation_url = 'https://' + ip_address + '/api/rest/migration_recommendation?select=*'\n            migration_recommendation_response = requests.get(migration_recommendation_url, auth=HTTPBasicAuth(username, password), verify=False)\n            migration_recommendation_path = json.loads(migration_recommendation_response.text)\n            migration_recommendation_count = len(migration_recommendation_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(migration_recommendation_count) + \" migration_recommendation counted for: \" + ip_address)\n            migration_recommendation_counter = 0\n            #iterate throught the payload into events\n            while migration_recommendation_counter < migration_recommendation_count:\n                migration_recommendation_path = json.loads(migration_recommendation_response.text)[migration_recommendation_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:migration_recommendation\", data=json.dumps(migration_recommendation_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: migration_recommendation event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: migration_recommendation CANNOT write event for: \" + ip_address)\n                migration_recommendation_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: migration_recommendation could not call api for: \" + ip_address)\n\n\n        #migration_session api call\n        try:\n            helper.log_info(\"Dell PowerStore - Migration: migration_session beginning data collection for: \" + ip_address)\n            migration_session_url = 'https://' + ip_address + '/api/rest/migration_session?select=*'\n            migration_session_response = requests.get(migration_session_url, auth=HTTPBasicAuth(username, password), verify=False)\n            migration_session_path = json.loads(migration_session_response.text)\n            migration_session_count = len(migration_session_path)\n            helper.log_info(\"Dell PowerStore - Migration: \" + str(migration_session_count) + \" migration_session counted for: \" + ip_address)\n            migration_session_counter = 0\n            #iterate throught the payload into events\n            while migration_session_counter < migration_session_count:\n                migration_session_path = json.loads(migration_session_response.text)[migration_session_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:migration_session\", data=json.dumps(migration_session_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Migration: migration_session event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Migration: migration_session CANNOT write event for: \" + ip_address)\n                migration_session_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Migration: migration_session could not call api for: \" + ip_address)\n            \n#########################    \n# Monitoring Collection #\n#########################\n    if monitoring is True:\n        helper.log_info(\"Dell PowerStore - Monitoring: Trying Monitoring collection for: \" + ip_address)\n        #alert api call\n        try:\n            helper.log_info(\"Dell PowerStore - Monitoring: alert beginning data collection for: \" + ip_address)\n            alert_url = 'https://' + ip_address + '/api/rest/alert?select=*'\n            alert_response = requests.get(alert_url, auth=HTTPBasicAuth(username, password), verify=False)\n            alert_path = json.loads(alert_response.text)\n            alert_count = len(alert_path)\n            helper.log_info(\"Dell PowerStore - Monitoring: \" + str(alert_count) + \" alert counted for: \" + ip_address)\n            alert_counter = 0\n            #iterate throught the payload into events\n            while alert_counter < alert_count:\n                alert_path = json.loads(alert_response.text)[alert_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:alert\", data=json.dumps(alert_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Monitoring: alert event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Monitoring: alert CANNOT write event for: \" + ip_address)\n                alert_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Monitoring: alert could not call api for: \" + ip_address)\n\n\n        #event api call\n        try:\n            helper.log_info(\"Dell PowerStore - Monitoring: event beginning data collection for: \" + ip_address)\n            event_url = 'https://' + ip_address + '/api/rest/event?select=*'\n            event_response = requests.get(event_url, auth=HTTPBasicAuth(username, password), verify=False)\n            event_path = json.loads(event_response.text)\n            event_count = len(event_path)\n            helper.log_info(\"Dell PowerStore - Monitoring: \" + str(event_count) + \" event counted for: \" + ip_address)\n            event_counter = 0\n            #iterate throught the payload into events\n            while event_counter < event_count:\n                event_path = json.loads(event_response.text)[event_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:event\", data=json.dumps(event_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Monitoring: event event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Monitoring: event CANNOT write event for: \" + ip_address)\n                event_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Monitoring: event could not call api for: \" + ip_address)\n\n\n        #job api call\n        try:\n            helper.log_info(\"Dell PowerStore - Monitoring: job beginning data collection for: \" + ip_address)\n            job_url = 'https://' + ip_address + '/api/rest/job?select=*'\n            job_response = requests.get(job_url, auth=HTTPBasicAuth(username, password), verify=False)\n            job_path = json.loads(job_response.text)\n            job_count = len(job_path)\n            helper.log_info(\"Dell PowerStore - Monitoring: \" + str(job_count) + \" job counted for: \" + ip_address)\n            job_counter = 0\n            #iterate throught the payload into events\n            while job_counter < job_count:\n                job_path = json.loads(job_response.text)[job_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:job\", data=json.dumps(job_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Monitoring: job event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Monitoring: job CANNOT write event for: \" + ip_address)\n                job_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Monitoring: job could not call api for: \" + ip_address)\n\n\n        #metrics api call\n        try:\n            helper.log_info(\"Dell PowerStore - Monitoring: metrics beginning data collection for: \" + ip_address)\n            metrics_url = 'https://' + ip_address + '/api/rest/metrics?select=*'\n            metrics_response = requests.get(metrics_url, auth=HTTPBasicAuth(username, password), verify=False)\n            metrics_path = json.loads(metrics_response.text)\n            metrics_count = len(metrics_path)\n            helper.log_info(\"Dell PowerStore - Monitoring: \" + str(metrics_count) + \" metrics counted for: \" + ip_address)\n            metrics_counter = 0\n            #iterate throught the payload into events\n            while metrics_counter < metrics_count:\n                metrics_path = json.loads(metrics_response.text)[metrics_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:metrics\", data=json.dumps(metrics_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Monitoring: metrics event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Monitoring: metrics CANNOT write event for: \" + ip_address)\n                metrics_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Monitoring: metrics could not call api for: \" + ip_address)\n\n#########################    \n# Protection Collection #\n#########################\n    if protection is True:\n        helper.log_info(\"Dell PowerStore - Protection: Trying Protection collection for: \" + ip_address)\n        #policy api call\n        try:\n            helper.log_info(\"Dell PowerStore - Protection: policy beginning data collection for: \" + ip_address)\n            policy_url = 'https://' + ip_address + '/api/rest/policy?select=*'\n            policy_response = requests.get(policy_url, auth=HTTPBasicAuth(username, password), verify=False)\n            policy_path = json.loads(policy_response.text)\n            policy_count = len(policy_path)\n            helper.log_info(\"Dell PowerStore - Protection: \" + str(policy_count) + \" policy counted for: \" + ip_address)\n            policy_counter = 0\n            #iterate throught the payload into events\n            while policy_counter < policy_count:\n                policy_path = json.loads(policy_response.text)[policy_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:policy\", data=json.dumps(policy_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Protection: policy event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Protection: policy CANNOT write event for: \" + ip_address)\n                policy_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Protection: policy could not call api for: \" + ip_address)\n\n\n        #remote_system api call\n        try:\n            helper.log_info(\"Dell PowerStore - Protection: remote_system beginning data collection for: \" + ip_address)\n            remote_system_url = 'https://' + ip_address + '/api/rest/remote_system?select=*'\n            remote_system_response = requests.get(remote_system_url, auth=HTTPBasicAuth(username, password), verify=False)\n            remote_system_path = json.loads(remote_system_response.text)\n            remote_system_count = len(remote_system_path)\n            helper.log_info(\"Dell PowerStore - Protection: \" + str(remote_system_count) + \" remote_system counted for: \" + ip_address)\n            remote_system_counter = 0\n            #iterate throught the payload into events\n            while remote_system_counter < remote_system_count:\n                remote_system_path = json.loads(remote_system_response.text)[remote_system_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:remote_system\", data=json.dumps(remote_system_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Protection: remote_system event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Protection: remote_system CANNOT write event for: \" + ip_address)\n                remote_system_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Protection: remote_system could not call api for: \" + ip_address)\n\n\n        #replication_rule api call\n        try:\n            helper.log_info(\"Dell PowerStore - Protection: replication_rule beginning data collection for: \" + ip_address)\n            replication_rule_url = 'https://' + ip_address + '/api/rest/replication_rule?select=*'\n            replication_rule_response = requests.get(replication_rule_url, auth=HTTPBasicAuth(username, password), verify=False)\n            replication_rule_path = json.loads(replication_rule_response.text)\n            replication_rule_count = len(replication_rule_path)\n            helper.log_info(\"Dell PowerStore - Protection: \" + str(replication_rule_count) + \" replication_rule counted for: \" + ip_address)\n            replication_rule_counter = 0\n            #iterate throught the payload into events\n            while replication_rule_counter < replication_rule_count:\n                replication_rule_path = json.loads(replication_rule_response.text)[replication_rule_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:replication_rule\", data=json.dumps(replication_rule_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Protection: replication_rule event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Protection: replication_rule CANNOT write event for: \" + ip_address)\n                replication_rule_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Protection: replication_rule could not call api for: \" + ip_address)\n\n\n        #replication_session api call\n        try:\n            helper.log_info(\"Dell PowerStore - Protection: replication_session beginning data collection for: \" + ip_address)\n            replication_session_url = 'https://' + ip_address + '/api/rest/replication_session?select=*'\n            replication_session_response = requests.get(replication_session_url, auth=HTTPBasicAuth(username, password), verify=False)\n            replication_session_path = json.loads(replication_session_response.text)\n            replication_session_count = len(replication_session_path)\n            helper.log_info(\"Dell PowerStore - Protection: \" + str(replication_session_count) + \" replication_session counted for: \" + ip_address)\n            replication_session_counter = 0\n            #iterate throught the payload into events\n            while replication_session_counter < replication_session_count:\n                replication_session_path = json.loads(replication_session_response.text)[replication_session_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:replication_session\", data=json.dumps(replication_session_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Protection: replication_session event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Protection: replication_session CANNOT write event for: \" + ip_address)\n                replication_session_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Protection: replication_session could not call api for: \" + ip_address)\n\n\n        #snapshot_rule api call\n        try:\n            helper.log_info(\"Dell PowerStore - Protection: snapshot_rule beginning data collection for: \" + ip_address)\n            snapshot_rule_url = 'https://' + ip_address + '/api/rest/snapshot_rule?select=*'\n            snapshot_rule_response = requests.get(snapshot_rule_url, auth=HTTPBasicAuth(username, password), verify=False)\n            snapshot_rule_path = json.loads(snapshot_rule_response.text)\n            snapshot_rule_count = len(snapshot_rule_path)\n            helper.log_info(\"Dell PowerStore - Protection: \" + str(snapshot_rule_count) + \" snapshot_rule counted for: \" + ip_address)\n            snapshot_rule_counter = 0\n            #iterate throught the payload into events\n            while snapshot_rule_counter < snapshot_rule_count:\n                snapshot_rule_path = json.loads(snapshot_rule_response.text)[snapshot_rule_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:snapshot_rule\", data=json.dumps(snapshot_rule_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Protection: snapshot_rule event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Protection: snapshot_rule CANNOT write event for: \" + ip_address)\n                snapshot_rule_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Protection: snapshot_rule could not call api for: \" + ip_address)\n\n#######################    \n# Settings Collection #\n#######################\n    if settings is True:\n        helper.log_info(\"Dell PowerStore - Settings: Trying Settings collection for: \" + ip_address)\n        #license api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: license beginning data collection for: \" + ip_address)\n            license_url = 'https://' + ip_address + '/api/rest/license?select=*'\n            license_response = requests.get(license_url, auth=HTTPBasicAuth(username, password), verify=False)\n            license_path = json.loads(license_response.text)\n            license_count = len(license_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(license_count) + \" license counted for: \" + ip_address)\n            license_counter = 0\n            #iterate throught the payload into events\n            while license_counter < license_count:\n                license_path = json.loads(license_response.text)[license_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:license\", data=json.dumps(license_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: license event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: license CANNOT write event for: \" + ip_address)\n                license_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: license could not call api for: \" + ip_address)\n\n\n        #logout api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: logout beginning data collection for: \" + ip_address)\n            logout_url = 'https://' + ip_address + '/api/rest/logout?select=*'\n            logout_response = requests.get(logout_url, auth=HTTPBasicAuth(username, password), verify=False)\n            logout_path = json.loads(logout_response.text)\n            logout_count = len(logout_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(logout_count) + \" logout counted for: \" + ip_address)\n            logout_counter = 0\n            #iterate throught the payload into events\n            while logout_counter < logout_count:\n                logout_path = json.loads(logout_response.text)[logout_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:logout\", data=json.dumps(logout_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: logout event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: logout CANNOT write event for: \" + ip_address)\n                logout_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: logout could not call api for: \" + ip_address)\n\n\n        #software_installed api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: software_installed beginning data collection for: \" + ip_address)\n            software_installed_url = 'https://' + ip_address + '/api/rest/software_installed?select=*'\n            software_installed_response = requests.get(software_installed_url, auth=HTTPBasicAuth(username, password), verify=False)\n            software_installed_path = json.loads(software_installed_response.text)\n            software_installed_count = len(software_installed_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(software_installed_count) + \" software_installed counted for: \" + ip_address)\n            software_installed_counter = 0\n            #iterate throught the payload into events\n            while software_installed_counter < software_installed_count:\n                software_installed_path = json.loads(software_installed_response.text)[software_installed_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:software_installed\", data=json.dumps(software_installed_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: software_installed event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: software_installed CANNOT write event for: \" + ip_address)\n                software_installed_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: software_installed could not call api for: \" + ip_address)\n\n\n        #software_package api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: software_package beginning data collection for: \" + ip_address)\n            software_package_url = 'https://' + ip_address + '/api/rest/software_package?select=*'\n            software_package_response = requests.get(software_package_url, auth=HTTPBasicAuth(username, password), verify=False)\n            software_package_path = json.loads(software_package_response.text)\n            software_package_count = len(software_package_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(software_package_count) + \" software_package counted for: \" + ip_address)\n            software_package_counter = 0\n            #iterate throught the payload into events\n            while software_package_counter < software_package_count:\n                software_package_path = json.loads(software_package_response.text)[software_package_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:software_package\", data=json.dumps(software_package_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: software_package event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: software_package CANNOT write event for: \" + ip_address)\n                software_package_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: software_package could not call api for: \" + ip_address)\n\n\n        #email_notify_destination api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: email_notify_destination beginning data collection for: \" + ip_address)\n            email_notify_destination_url = 'https://' + ip_address + '/api/rest/email_notify_destination?select=*'\n            email_notify_destination_response = requests.get(email_notify_destination_url, auth=HTTPBasicAuth(username, password), verify=False)\n            email_notify_destination_path = json.loads(email_notify_destination_response.text)\n            email_notify_destination_count = len(email_notify_destination_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(email_notify_destination_count) + \" email_notify_destination counted for: \" + ip_address)\n            email_notify_destination_counter = 0\n            #iterate throught the payload into events\n            while email_notify_destination_counter < email_notify_destination_count:\n                email_notify_destination_path = json.loads(email_notify_destination_response.text)[email_notify_destination_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:email_notify_destination\", data=json.dumps(email_notify_destination_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: email_notify_destination event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: email_notify_destination CANNOT write event for: \" + ip_address)\n                email_notify_destination_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: email_notify_destination could not call api for: \" + ip_address)\n\n\n        #chap_config api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: chap_config beginning data collection for: \" + ip_address)\n            chap_config_url = 'https://' + ip_address + '/api/rest/chap_config?select=*'\n            chap_config_response = requests.get(chap_config_url, auth=HTTPBasicAuth(username, password), verify=False)\n            chap_config_path = json.loads(chap_config_response.text)\n            chap_config_count = len(chap_config_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(chap_config_count) + \" chap_config counted for: \" + ip_address)\n            chap_config_counter = 0\n            #iterate throught the payload into events\n            while chap_config_counter < chap_config_count:\n                chap_config_path = json.loads(chap_config_response.text)[chap_config_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:chap_config\", data=json.dumps(chap_config_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: chap_config event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: chap_config CANNOT write event for: \" + ip_address)\n                chap_config_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: chap_config could not call api for: \" + ip_address)\n\n\n        #local_user api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: local_user beginning data collection for: \" + ip_address)\n            local_user_url = 'https://' + ip_address + '/api/rest/local_user?select=*'\n            local_user_response = requests.get(local_user_url, auth=HTTPBasicAuth(username, password), verify=False)\n            local_user_path = json.loads(local_user_response.text)\n            local_user_count = len(local_user_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(local_user_count) + \" local_user counted for: \" + ip_address)\n            local_user_counter = 0\n            #iterate throught the payload into events\n            while local_user_counter < local_user_count:\n                local_user_path = json.loads(local_user_response.text)[local_user_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:local_user\", data=json.dumps(local_user_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: local_user event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: local_user CANNOT write event for: \" + ip_address)\n                local_user_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: local_user could not call api for: \" + ip_address)\n\n\n        #login_session api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: login_session beginning data collection for: \" + ip_address)\n            login_session_url = 'https://' + ip_address + '/api/rest/login_session?select=*'\n            login_session_response = requests.get(login_session_url, auth=HTTPBasicAuth(username, password), verify=False)\n            login_session_path = json.loads(login_session_response.text)\n            login_session_count = len(login_session_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(login_session_count) + \" login_session counted for: \" + ip_address)\n            login_session_counter = 0\n            #iterate throught the payload into events\n            while login_session_counter < login_session_count:\n                login_session_path = json.loads(login_session_response.text)[login_session_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:login_session\", data=json.dumps(login_session_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: login_session event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: login_session CANNOT write event for: \" + ip_address)\n                login_session_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: login_session could not call api for: \" + ip_address)\n\n\n        #keystore_archive api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: keystore_archive beginning data collection for: \" + ip_address)\n            keystore_archive_url = 'https://' + ip_address + '/api/rest/keystore_archive?select=*'\n            keystore_archive_response = requests.get(keystore_archive_url, auth=HTTPBasicAuth(username, password), verify=False)\n            keystore_archive_path = json.loads(keystore_archive_response.text)\n            keystore_archive_count = len(keystore_archive_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(keystore_archive_count) + \" keystore_archive counted for: \" + ip_address)\n            keystore_archive_counter = 0\n            #iterate throught the payload into events\n            while keystore_archive_counter < keystore_archive_count:\n                keystore_archive_path = json.loads(keystore_archive_response.text)[keystore_archive_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:keystore_archive\", data=json.dumps(keystore_archive_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: keystore_archive event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: keystore_archive CANNOT write event for: \" + ip_address)\n                keystore_archive_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: keystore_archive could not call api for: \" + ip_address)\n\n\n        #role api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: role beginning data collection for: \" + ip_address)\n            role_url = 'https://' + ip_address + '/api/rest/role?select=*'\n            role_response = requests.get(role_url, auth=HTTPBasicAuth(username, password), verify=False)\n            role_path = json.loads(role_response.text)\n            role_count = len(role_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(role_count) + \" role counted for: \" + ip_address)\n            role_counter = 0\n            #iterate throught the payload into events\n            while role_counter < role_count:\n                role_path = json.loads(role_response.text)[role_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:role\", data=json.dumps(role_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: role event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: role CANNOT write event for: \" + ip_address)\n                role_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: role could not call api for: \" + ip_address)\n\n\n        #security_config api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: security_config beginning data collection for: \" + ip_address)\n            security_config_url = 'https://' + ip_address + '/api/rest/security_config?select=*'\n            security_config_response = requests.get(security_config_url, auth=HTTPBasicAuth(username, password), verify=False)\n            security_config_path = json.loads(security_config_response.text)\n            security_config_count = len(security_config_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(security_config_count) + \" security_config counted for: \" + ip_address)\n            security_config_counter = 0\n            #iterate throught the payload into events\n            while security_config_counter < security_config_count:\n                security_config_path = json.loads(security_config_response.text)[security_config_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:security_config\", data=json.dumps(security_config_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: security_config event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: security_config CANNOT write event for: \" + ip_address)\n                security_config_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: security_config could not call api for: \" + ip_address)\n\n\n        #x509_certificate api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: x509_certificate beginning data collection for: \" + ip_address)\n            x509_certificate_url = 'https://' + ip_address + '/api/rest/x509_certificate?select=*'\n            x509_certificate_response = requests.get(x509_certificate_url, auth=HTTPBasicAuth(username, password), verify=False)\n            x509_certificate_path = json.loads(x509_certificate_response.text)\n            x509_certificate_count = len(x509_certificate_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(x509_certificate_count) + \" x509_certificate counted for: \" + ip_address)\n            x509_certificate_counter = 0\n            #iterate throught the payload into events\n            while x509_certificate_counter < x509_certificate_count:\n                x509_certificate_path = json.loads(x509_certificate_response.text)[x509_certificate_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:x509_certificate\", data=json.dumps(x509_certificate_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: x509_certificate event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: x509_certificate CANNOT write event for: \" + ip_address)\n                x509_certificate_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: x509_certificate could not call api for: \" + ip_address)\n\n\n        #audit_event api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: audit_event beginning data collection for: \" + ip_address)\n            audit_event_url = 'https://' + ip_address + '/api/rest/audit_event?select=*'\n            audit_event_response = requests.get(audit_event_url, auth=HTTPBasicAuth(username, password), verify=False)\n            audit_event_path = json.loads(audit_event_response.text)\n            audit_event_count = len(audit_event_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(audit_event_count) + \" audit_event counted for: \" + ip_address)\n            audit_event_counter = 0\n            #iterate throught the payload into events\n            while audit_event_counter < audit_event_count:\n                audit_event_path = json.loads(audit_event_response.text)[audit_event_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:audit_event\", data=json.dumps(audit_event_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: audit_event event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: audit_event CANNOT write event for: \" + ip_address)\n                audit_event_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: audit_event could not call api for: \" + ip_address)\n\n\n        #ip_pool_address api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: ip_pool_address beginning data collection for: \" + ip_address)\n            ip_pool_address_url = 'https://' + ip_address + '/api/rest/ip_pool_address?select=*'\n            ip_pool_address_response = requests.get(ip_pool_address_url, auth=HTTPBasicAuth(username, password), verify=False)\n            ip_pool_address_path = json.loads(ip_pool_address_response.text)\n            ip_pool_address_count = len(ip_pool_address_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(ip_pool_address_count) + \" ip_pool_address counted for: \" + ip_address)\n            ip_pool_address_counter = 0\n            #iterate throught the payload into events\n            while ip_pool_address_counter < ip_pool_address_count:\n                ip_pool_address_path = json.loads(ip_pool_address_response.text)[ip_pool_address_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:ip_pool_address\", data=json.dumps(ip_pool_address_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: ip_pool_address event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: ip_pool_address CANNOT write event for: \" + ip_address)\n                ip_pool_address_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: ip_pool_address could not call api for: \" + ip_address)\n\n\n        #ip_port api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: ip_port beginning data collection for: \" + ip_address)\n            ip_port_url = 'https://' + ip_address + '/api/rest/ip_port?select=*'\n            ip_port_response = requests.get(ip_port_url, auth=HTTPBasicAuth(username, password), verify=False)\n            ip_port_path = json.loads(ip_port_response.text)\n            ip_port_count = len(ip_port_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(ip_port_count) + \" ip_port counted for: \" + ip_address)\n            ip_port_counter = 0\n            #iterate throught the payload into events\n            while ip_port_counter < ip_port_count:\n                ip_port_path = json.loads(ip_port_response.text)[ip_port_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:ip_port\", data=json.dumps(ip_port_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: ip_port event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: ip_port CANNOT write event for: \" + ip_address)\n                ip_port_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: ip_port could not call api for: \" + ip_address)\n\n\n        #network api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: network beginning data collection for: \" + ip_address)\n            network_url = 'https://' + ip_address + '/api/rest/network?select=*'\n            network_response = requests.get(network_url, auth=HTTPBasicAuth(username, password), verify=False)\n            network_path = json.loads(network_response.text)\n            network_count = len(network_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(network_count) + \" network counted for: \" + ip_address)\n            network_counter = 0\n            #iterate throught the payload into events\n            while network_counter < network_count:\n                network_path = json.loads(network_response.text)[network_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:network\", data=json.dumps(network_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: network event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: network CANNOT write event for: \" + ip_address)\n                network_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: network could not call api for: \" + ip_address)\n\n\n        #ntp api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: ntp beginning data collection for: \" + ip_address)\n            ntp_url = 'https://' + ip_address + '/api/rest/ntp?select=*'\n            ntp_response = requests.get(ntp_url, auth=HTTPBasicAuth(username, password), verify=False)\n            ntp_path = json.loads(ntp_response.text)\n            ntp_count = len(ntp_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(ntp_count) + \" ntp counted for: \" + ip_address)\n            ntp_counter = 0\n            #iterate throught the payload into events\n            while ntp_counter < ntp_count:\n                ntp_path = json.loads(ntp_response.text)[ntp_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:ntp\", data=json.dumps(ntp_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: ntp event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: ntp CANNOT write event for: \" + ip_address)\n                ntp_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: ntp could not call api for: \" + ip_address)\n\n\n        #dns api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: dns beginning data collection for: \" + ip_address)\n            dns_url = 'https://' + ip_address + '/api/rest/dns?select=*'\n            dns_response = requests.get(dns_url, auth=HTTPBasicAuth(username, password), verify=False)\n            dns_path = json.loads(dns_response.text)\n            dns_count = len(dns_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(dns_count) + \" dns counted for: \" + ip_address)\n            dns_counter = 0\n            #iterate throught the payload into events\n            while dns_counter < dns_count:\n                dns_path = json.loads(dns_response.text)[dns_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:dns\", data=json.dumps(dns_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: dns event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: dns CANNOT write event for: \" + ip_address)\n                dns_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: dns could not call api for: \" + ip_address)\n\n\n        #smtp_config api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: smtp_config beginning data collection for: \" + ip_address)\n            smtp_config_url = 'https://' + ip_address + '/api/rest/smtp_config?select=*'\n            smtp_config_response = requests.get(smtp_config_url, auth=HTTPBasicAuth(username, password), verify=False)\n            smtp_config_path = json.loads(smtp_config_response.text)\n            smtp_config_count = len(smtp_config_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(smtp_config_count) + \" smtp_config counted for: \" + ip_address)\n            smtp_config_counter = 0\n            #iterate throught the payload into events\n            while smtp_config_counter < smtp_config_count:\n                smtp_config_path = json.loads(smtp_config_response.text)[smtp_config_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:smtp_config\", data=json.dumps(smtp_config_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: smtp_config event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: smtp_config CANNOT write event for: \" + ip_address)\n                smtp_config_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: smtp_config could not call api for: \" + ip_address)\n\n\n        #physical_switch api call\n        try:\n            helper.log_info(\"Dell PowerStore - Settings: physical_switch beginning data collection for: \" + ip_address)\n            physical_switch_url = 'https://' + ip_address + '/api/rest/physical_switch?select=*'\n            physical_switch_response = requests.get(physical_switch_url, auth=HTTPBasicAuth(username, password), verify=False)\n            physical_switch_path = json.loads(physical_switch_response.text)\n            physical_switch_count = len(physical_switch_path)\n            helper.log_info(\"Dell PowerStore - Settings: \" + str(physical_switch_count) + \" physical_switch counted for: \" + ip_address)\n            physical_switch_counter = 0\n            #iterate throught the payload into events\n            while physical_switch_counter < physical_switch_count:\n                physical_switch_path = json.loads(physical_switch_response.text)[physical_switch_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:physical_switch\", data=json.dumps(physical_switch_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Settings: physical_switch event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Settings: physical_switch CANNOT write event for: \" + ip_address)\n                physical_switch_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Settings: physical_switch could not call api for: \" + ip_address)\n\n######################    \n# Storage Collection #\n######################\n    if storage is True:\n        helper.log_info(\"Dell PowerStore - Storage: Trying Storage collection for: \" + ip_address)\n        #storage_container api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: storage_container beginning data collection for: \" + ip_address)\n            storage_container_url = 'https://' + ip_address + '/api/rest/storage_container?select=*'\n            storage_container_response = requests.get(storage_container_url, auth=HTTPBasicAuth(username, password), verify=False)\n            storage_container_path = json.loads(storage_container_response.text)\n            storage_container_count = len(storage_container_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(storage_container_count) + \" storage_container counted for: \" + ip_address)\n            storage_container_counter = 0\n            #iterate throught the payload into events\n            while storage_container_counter < storage_container_count:\n                storage_container_path = json.loads(storage_container_response.text)[storage_container_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:storage_container\", data=json.dumps(storage_container_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: storage_container event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: storage_container CANNOT write event for: \" + ip_address)\n                storage_container_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: storage_container could not call api for: \" + ip_address)\n\n\n        #virtual_volume api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: virtual_volume beginning data collection for: \" + ip_address)\n            virtual_volume_url = 'https://' + ip_address + '/api/rest/virtual_volume?select=*'\n            virtual_volume_response = requests.get(virtual_volume_url, auth=HTTPBasicAuth(username, password), verify=False)\n            virtual_volume_path = json.loads(virtual_volume_response.text)\n            virtual_volume_count = len(virtual_volume_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(virtual_volume_count) + \" virtual_volume counted for: \" + ip_address)\n            virtual_volume_counter = 0\n            #iterate throught the payload into events\n            while virtual_volume_counter < virtual_volume_count:\n                virtual_volume_path = json.loads(virtual_volume_response.text)[virtual_volume_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:virtual_volume\", data=json.dumps(virtual_volume_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: virtual_volume event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: virtual_volume CANNOT write event for: \" + ip_address)\n                virtual_volume_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: virtual_volume could not call api for: \" + ip_address)\n\n\n        #volume api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: volume beginning data collection for: \" + ip_address)\n            volume_url = 'https://' + ip_address + '/api/rest/volume?select=*'\n            volume_response = requests.get(volume_url, auth=HTTPBasicAuth(username, password), verify=False)\n            volume_path = json.loads(volume_response.text)\n            volume_count = len(volume_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(volume_count) + \" volume counted for: \" + ip_address)\n            volume_counter = 0\n            #iterate throught the payload into events\n            while volume_counter < volume_count:\n                volume_path = json.loads(volume_response.text)[volume_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:volume\", data=json.dumps(volume_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: volume event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: volume CANNOT write event for: \" + ip_address)\n                volume_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: volume could not call api for: \" + ip_address)\n\n\n        #nas_server api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: nas_server beginning data collection for: \" + ip_address)\n            nas_server_url = 'https://' + ip_address + '/api/rest/nas_server?select=*'\n            nas_server_response = requests.get(nas_server_url, auth=HTTPBasicAuth(username, password), verify=False)\n            nas_server_path = json.loads(nas_server_response.text)\n            nas_server_count = len(nas_server_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(nas_server_count) + \" nas_server counted for: \" + ip_address)\n            nas_server_counter = 0\n            #iterate throught the payload into events\n            while nas_server_counter < nas_server_count:\n                nas_server_path = json.loads(nas_server_response.text)[nas_server_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:nas_server\", data=json.dumps(nas_server_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: nas_server event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: nas_server CANNOT write event for: \" + ip_address)\n                nas_server_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: nas_server could not call api for: \" + ip_address)\n\n\n        #nfs_server api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: nfs_server beginning data collection for: \" + ip_address)\n            nfs_server_url = 'https://' + ip_address + '/api/rest/nfs_server?select=*'\n            nfs_server_response = requests.get(nfs_server_url, auth=HTTPBasicAuth(username, password), verify=False)\n            nfs_server_path = json.loads(nfs_server_response.text)\n            nfs_server_count = len(nfs_server_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(nfs_server_count) + \" nfs_server counted for: \" + ip_address)\n            nfs_server_counter = 0\n            #iterate throught the payload into events\n            while nfs_server_counter < nfs_server_count:\n                nfs_server_path = json.loads(nfs_server_response.text)[nfs_server_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:nfs_server\", data=json.dumps(nfs_server_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: nfs_server event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: nfs_server CANNOT write event for: \" + ip_address)\n                nfs_server_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: nfs_server could not call api for: \" + ip_address)\n\n\n        #smb_server api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: smb_server beginning data collection for: \" + ip_address)\n            smb_server_url = 'https://' + ip_address + '/api/rest/smb_server?select=*'\n            smb_server_response = requests.get(smb_server_url, auth=HTTPBasicAuth(username, password), verify=False)\n            smb_server_path = json.loads(smb_server_response.text)\n            smb_server_count = len(smb_server_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(smb_server_count) + \" smb_server counted for: \" + ip_address)\n            smb_server_counter = 0\n            #iterate throught the payload into events\n            while smb_server_counter < smb_server_count:\n                smb_server_path = json.loads(smb_server_response.text)[smb_server_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:smb_server\", data=json.dumps(smb_server_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: smb_server event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: smb_server CANNOT write event for: \" + ip_address)\n                smb_server_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: smb_server could not call api for: \" + ip_address)\n\n\n        #file_interface api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_interface beginning data collection for: \" + ip_address)\n            file_interface_url = 'https://' + ip_address + '/api/rest/file_interface?select=*'\n            file_interface_response = requests.get(file_interface_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_interface_path = json.loads(file_interface_response.text)\n            file_interface_count = len(file_interface_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_interface_count) + \" file_interface counted for: \" + ip_address)\n            file_interface_counter = 0\n            #iterate throught the payload into events\n            while file_interface_counter < file_interface_count:\n                file_interface_path = json.loads(file_interface_response.text)[file_interface_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_interface\", data=json.dumps(file_interface_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_interface event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_interface CANNOT write event for: \" + ip_address)\n                file_interface_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_interface could not call api for: \" + ip_address)\n\n\n        #file_ndmp api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_ndmp beginning data collection for: \" + ip_address)\n            file_ndmp_url = 'https://' + ip_address + '/api/rest/file_ndmp?select=*'\n            file_ndmp_response = requests.get(file_ndmp_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_ndmp_path = json.loads(file_ndmp_response.text)\n            file_ndmp_count = len(file_ndmp_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_ndmp_count) + \" file_ndmp counted for: \" + ip_address)\n            file_ndmp_counter = 0\n            #iterate throught the payload into events\n            while file_ndmp_counter < file_ndmp_count:\n                file_ndmp_path = json.loads(file_ndmp_response.text)[file_ndmp_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_ndmp\", data=json.dumps(file_ndmp_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_ndmp event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_ndmp CANNOT write event for: \" + ip_address)\n                file_ndmp_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_ndmp could not call api for: \" + ip_address)\n\n\n        #file_virus_checker api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_virus_checker beginning data collection for: \" + ip_address)\n            file_virus_checker_url = 'https://' + ip_address + '/api/rest/file_virus_checker?select=*'\n            file_virus_checker_response = requests.get(file_virus_checker_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_virus_checker_path = json.loads(file_virus_checker_response.text)\n            file_virus_checker_count = len(file_virus_checker_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_virus_checker_count) + \" file_virus_checker counted for: \" + ip_address)\n            file_virus_checker_counter = 0\n            #iterate throught the payload into events\n            while file_virus_checker_counter < file_virus_checker_count:\n                file_virus_checker_path = json.loads(file_virus_checker_response.text)[file_virus_checker_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_virus_checker\", data=json.dumps(file_virus_checker_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_virus_checker event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_virus_checker CANNOT write event for: \" + ip_address)\n                file_virus_checker_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_virus_checker could not call api for: \" + ip_address)\n\n\n        #performance_rule api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: performance_rule beginning data collection for: \" + ip_address)\n            performance_rule_url = 'https://' + ip_address + '/api/rest/performance_rule?select=*'\n            performance_rule_response = requests.get(performance_rule_url, auth=HTTPBasicAuth(username, password), verify=False)\n            performance_rule_path = json.loads(performance_rule_response.text)\n            performance_rule_count = len(performance_rule_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(performance_rule_count) + \" performance_rule counted for: \" + ip_address)\n            performance_rule_counter = 0\n            #iterate throught the payload into events\n            while performance_rule_counter < performance_rule_count:\n                performance_rule_path = json.loads(performance_rule_response.text)[performance_rule_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:performance_rule\", data=json.dumps(performance_rule_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: performance_rule event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: performance_rule CANNOT write event for: \" + ip_address)\n                performance_rule_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: performance_rule could not call api for: \" + ip_address)\n\n\n        #file_system api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_system beginning data collection for: \" + ip_address)\n            file_system_url = 'https://' + ip_address + '/api/rest/file_system?select=*'\n            file_system_response = requests.get(file_system_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_system_path = json.loads(file_system_response.text)\n            file_system_count = len(file_system_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_system_count) + \" file_system counted for: \" + ip_address)\n            file_system_counter = 0\n            #iterate throught the payload into events\n            while file_system_counter < file_system_count:\n                file_system_path = json.loads(file_system_response.text)[file_system_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_system\", data=json.dumps(file_system_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_system event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_system CANNOT write event for: \" + ip_address)\n                file_system_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_system could not call api for: \" + ip_address)\n\n\n        #smb_share api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: smb_share beginning data collection for: \" + ip_address)\n            smb_share_url = 'https://' + ip_address + '/api/rest/smb_share?select=*'\n            smb_share_response = requests.get(smb_share_url, auth=HTTPBasicAuth(username, password), verify=False)\n            smb_share_path = json.loads(smb_share_response.text)\n            smb_share_count = len(smb_share_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(smb_share_count) + \" smb_share counted for: \" + ip_address)\n            smb_share_counter = 0\n            #iterate throught the payload into events\n            while smb_share_counter < smb_share_count:\n                smb_share_path = json.loads(smb_share_response.text)[smb_share_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:smb_share\", data=json.dumps(smb_share_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: smb_share event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: smb_share CANNOT write event for: \" + ip_address)\n                smb_share_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: smb_share could not call api for: \" + ip_address)\n\n\n        #volume_group api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: volume_group beginning data collection for: \" + ip_address)\n            volume_group_url = 'https://' + ip_address + '/api/rest/volume_group?select=*'\n            volume_group_response = requests.get(volume_group_url, auth=HTTPBasicAuth(username, password), verify=False)\n            volume_group_path = json.loads(volume_group_response.text)\n            volume_group_count = len(volume_group_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(volume_group_count) + \" volume_group counted for: \" + ip_address)\n            volume_group_counter = 0\n            #iterate throught the payload into events\n            while volume_group_counter < volume_group_count:\n                volume_group_path = json.loads(volume_group_response.text)[volume_group_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:volume_group\", data=json.dumps(volume_group_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: volume_group event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: volume_group CANNOT write event for: \" + ip_address)\n                volume_group_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: volume_group could not call api for: \" + ip_address)\n\n\n        #file_tree_quota api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_tree_quota beginning data collection for: \" + ip_address)\n            file_tree_quota_url = 'https://' + ip_address + '/api/rest/file_tree_quota?select=*'\n            file_tree_quota_response = requests.get(file_tree_quota_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_tree_quota_path = json.loads(file_tree_quota_response.text)\n            file_tree_quota_count = len(file_tree_quota_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_tree_quota_count) + \" file_tree_quota counted for: \" + ip_address)\n            file_tree_quota_counter = 0\n            #iterate throught the payload into events\n            while file_tree_quota_counter < file_tree_quota_count:\n                file_tree_quota_path = json.loads(file_tree_quota_response.text)[file_tree_quota_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_tree_quota\", data=json.dumps(file_tree_quota_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_tree_quota event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_tree_quota CANNOT write event for: \" + ip_address)\n                file_tree_quota_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_tree_quota could not call api for: \" + ip_address)\n\n\n        #file_user_quota api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_user_quota beginning data collection for: \" + ip_address)\n            file_user_quota_url = 'https://' + ip_address + '/api/rest/file_user_quota?select=*'\n            file_user_quota_response = requests.get(file_user_quota_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_user_quota_path = json.loads(file_user_quota_response.text)\n            file_user_quota_count = len(file_user_quota_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_user_quota_count) + \" file_user_quota counted for: \" + ip_address)\n            file_user_quota_counter = 0\n            #iterate throught the payload into events\n            while file_user_quota_counter < file_user_quota_count:\n                file_user_quota_path = json.loads(file_user_quota_response.text)[file_user_quota_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_user_quota\", data=json.dumps(file_user_quota_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_user_quota event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_user_quota CANNOT write event for: \" + ip_address)\n                file_user_quota_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_user_quota could not call api for: \" + ip_address)\n\n\n        #file_dns api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_dns beginning data collection for: \" + ip_address)\n            file_dns_url = 'https://' + ip_address + '/api/rest/file_dns?select=*'\n            file_dns_response = requests.get(file_dns_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_dns_path = json.loads(file_dns_response.text)\n            file_dns_count = len(file_dns_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_dns_count) + \" file_dns counted for: \" + ip_address)\n            file_dns_counter = 0\n            #iterate throught the payload into events\n            while file_dns_counter < file_dns_count:\n                file_dns_path = json.loads(file_dns_response.text)[file_dns_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_dns\", data=json.dumps(file_dns_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_dns event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_dns CANNOT write event for: \" + ip_address)\n                file_dns_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_dns could not call api for: \" + ip_address)\n\n\n        #file_ftp api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_ftp beginning data collection for: \" + ip_address)\n            file_ftp_url = 'https://' + ip_address + '/api/rest/file_ftp?select=*'\n            file_ftp_response = requests.get(file_ftp_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_ftp_path = json.loads(file_ftp_response.text)\n            file_ftp_count = len(file_ftp_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_ftp_count) + \" file_ftp counted for: \" + ip_address)\n            file_ftp_counter = 0\n            #iterate throught the payload into events\n            while file_ftp_counter < file_ftp_count:\n                file_ftp_path = json.loads(file_ftp_response.text)[file_ftp_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_ftp\", data=json.dumps(file_ftp_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_ftp event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_ftp CANNOT write event for: \" + ip_address)\n                file_ftp_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_ftp could not call api for: \" + ip_address)\n\n\n        #file_interface_route api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_interface_route beginning data collection for: \" + ip_address)\n            file_interface_route_url = 'https://' + ip_address + '/api/rest/file_interface_route?select=*'\n            file_interface_route_response = requests.get(file_interface_route_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_interface_route_path = json.loads(file_interface_route_response.text)\n            file_interface_route_count = len(file_interface_route_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_interface_route_count) + \" file_interface_route counted for: \" + ip_address)\n            file_interface_route_counter = 0\n            #iterate throught the payload into events\n            while file_interface_route_counter < file_interface_route_count:\n                file_interface_route_path = json.loads(file_interface_route_response.text)[file_interface_route_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_interface_route\", data=json.dumps(file_interface_route_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_interface_route event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_interface_route CANNOT write event for: \" + ip_address)\n                file_interface_route_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_interface_route could not call api for: \" + ip_address)\n\n\n        #file_kerberos api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_kerberos beginning data collection for: \" + ip_address)\n            file_kerberos_url = 'https://' + ip_address + '/api/rest/file_kerberos?select=*'\n            file_kerberos_response = requests.get(file_kerberos_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_kerberos_path = json.loads(file_kerberos_response.text)\n            file_kerberos_count = len(file_kerberos_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_kerberos_count) + \" file_kerberos counted for: \" + ip_address)\n            file_kerberos_counter = 0\n            #iterate throught the payload into events\n            while file_kerberos_counter < file_kerberos_count:\n                file_kerberos_path = json.loads(file_kerberos_response.text)[file_kerberos_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_kerberos\", data=json.dumps(file_kerberos_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_kerberos event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_kerberos CANNOT write event for: \" + ip_address)\n                file_kerberos_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_kerberos could not call api for: \" + ip_address)\n\n\n        #file_ldap api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_ldap beginning data collection for: \" + ip_address)\n            file_ldap_url = 'https://' + ip_address + '/api/rest/file_ldap?select=*'\n            file_ldap_response = requests.get(file_ldap_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_ldap_path = json.loads(file_ldap_response.text)\n            file_ldap_count = len(file_ldap_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_ldap_count) + \" file_ldap counted for: \" + ip_address)\n            file_ldap_counter = 0\n            #iterate throught the payload into events\n            while file_ldap_counter < file_ldap_count:\n                file_ldap_path = json.loads(file_ldap_response.text)[file_ldap_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_ldap\", data=json.dumps(file_ldap_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_ldap event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_ldap CANNOT write event for: \" + ip_address)\n                file_ldap_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_ldap could not call api for: \" + ip_address)\n\n\n        #file_nis api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: file_nis beginning data collection for: \" + ip_address)\n            file_nis_url = 'https://' + ip_address + '/api/rest/file_nis?select=*'\n            file_nis_response = requests.get(file_nis_url, auth=HTTPBasicAuth(username, password), verify=False)\n            file_nis_path = json.loads(file_nis_response.text)\n            file_nis_count = len(file_nis_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(file_nis_count) + \" file_nis counted for: \" + ip_address)\n            file_nis_counter = 0\n            #iterate throught the payload into events\n            while file_nis_counter < file_nis_count:\n                file_nis_path = json.loads(file_nis_response.text)[file_nis_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:file_nis\", data=json.dumps(file_nis_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: file_nis event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: file_nis CANNOT write event for: \" + ip_address)\n                file_nis_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: file_nis could not call api for: \" + ip_address)\n\n\n        #nfs_export api call\n        try:\n            helper.log_info(\"Dell PowerStore - Storage: nfs_export beginning data collection for: \" + ip_address)\n            nfs_export_url = 'https://' + ip_address + '/api/rest/nfs_export?select=*'\n            nfs_export_response = requests.get(nfs_export_url, auth=HTTPBasicAuth(username, password), verify=False)\n            nfs_export_path = json.loads(nfs_export_response.text)\n            nfs_export_count = len(nfs_export_path)\n            helper.log_info(\"Dell PowerStore - Storage: \" + str(nfs_export_count) + \" nfs_export counted for: \" + ip_address)\n            nfs_export_counter = 0\n            #iterate throught the payload into events\n            while nfs_export_counter < nfs_export_count:\n                nfs_export_path = json.loads(nfs_export_response.text)[nfs_export_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:nfs_export\", data=json.dumps(nfs_export_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Storage: nfs_export event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Storage: nfs_export CANNOT write event for: \" + ip_address)\n                nfs_export_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Storage: nfs_export could not call api for: \" + ip_address)\n\n######################    \n# Support Collection #\n######################\n    if support is True:\n        helper.log_info(\"Dell PowerStore - Support: Trying Support collection for: \" + ip_address)\n        #service_config api call\n        try:\n            helper.log_info(\"Dell PowerStore - Support: service_config beginning data collection for: \" + ip_address)\n            service_config_url = 'https://' + ip_address + '/api/rest/service_config?select=*'\n            service_config_response = requests.get(service_config_url, auth=HTTPBasicAuth(username, password), verify=False)\n            service_config_path = json.loads(service_config_response.text)\n            service_config_count = len(service_config_path)\n            helper.log_info(\"Dell PowerStore - Support: \" + str(service_config_count) + \" service_config counted for: \" + ip_address)\n            service_config_counter = 0\n            #iterate throught the payload into events\n            while service_config_counter < service_config_count:\n                service_config_path = json.loads(service_config_response.text)[service_config_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:service_config\", data=json.dumps(service_config_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Support: service_config event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Support: service_config CANNOT write event for: \" + ip_address)\n                service_config_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Support: service_config could not call api for: \" + ip_address)\n\n\n        #service_user api call\n        try:\n            helper.log_info(\"Dell PowerStore - Support: service_user beginning data collection for: \" + ip_address)\n            service_user_url = 'https://' + ip_address + '/api/rest/service_user?select=*'\n            service_user_response = requests.get(service_user_url, auth=HTTPBasicAuth(username, password), verify=False)\n            service_user_path = json.loads(service_user_response.text)\n            service_user_count = len(service_user_path)\n            helper.log_info(\"Dell PowerStore - Support: \" + str(service_user_count) + \" service_user counted for: \" + ip_address)\n            service_user_counter = 0\n            #iterate throught the payload into events\n            while service_user_counter < service_user_count:\n                service_user_path = json.loads(service_user_response.text)[service_user_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:service_user\", data=json.dumps(service_user_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Support: service_user event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Support: service_user CANNOT write event for: \" + ip_address)\n                service_user_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Support: service_user could not call api for: \" + ip_address)\n\n\n        #maintenance_window api call\n        try:\n            helper.log_info(\"Dell PowerStore - Support: maintenance_window beginning data collection for: \" + ip_address)\n            maintenance_window_url = 'https://' + ip_address + '/api/rest/maintenance_window?select=*'\n            maintenance_window_response = requests.get(maintenance_window_url, auth=HTTPBasicAuth(username, password), verify=False)\n            maintenance_window_path = json.loads(maintenance_window_response.text)\n            maintenance_window_count = len(maintenance_window_path)\n            helper.log_info(\"Dell PowerStore - Support: \" + str(maintenance_window_count) + \" maintenance_window counted for: \" + ip_address)\n            maintenance_window_counter = 0\n            #iterate throught the payload into events\n            while maintenance_window_counter < maintenance_window_count:\n                maintenance_window_path = json.loads(maintenance_window_response.text)[maintenance_window_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:maintenance_window\", data=json.dumps(maintenance_window_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - Support: maintenance_window event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - Support: maintenance_window CANNOT write event for: \" + ip_address)\n                maintenance_window_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - Support: maintenance_window could not call api for: \" + ip_address)\n    \n#############################    \n# Sys & Hardware Collection #\n#############################\n    if system_and_hardware is True:\n        helper.log_info(\"Dell PowerStore - System_and_Hardware: Trying System_and_Hardware collection for: \" + ip_address)\n        #appliance api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: appliance beginning data collection for: \" + ip_address)\n            appliance_url = 'https://' + ip_address + '/api/rest/appliance?select=*'\n            appliance_response = requests.get(appliance_url, auth=HTTPBasicAuth(username, password), verify=False)\n            appliance_path = json.loads(appliance_response.text)\n            appliance_count = len(appliance_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(appliance_count) + \" appliance counted for: \" + ip_address)\n            appliance_counter = 0\n            #iterate throught the payload into events\n            while appliance_counter < appliance_count:\n                appliance_path = json.loads(appliance_response.text)[appliance_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:appliance\", data=json.dumps(appliance_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: appliance event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: appliance CANNOT write event for: \" + ip_address)\n                appliance_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: appliance could not call api for: \" + ip_address)\n\n\n        #cluster api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: cluster beginning data collection for: \" + ip_address)\n            cluster_url = 'https://' + ip_address + '/api/rest/cluster?select=*'\n            cluster_response = requests.get(cluster_url, auth=HTTPBasicAuth(username, password), verify=False)\n            cluster_path = json.loads(cluster_response.text)\n            cluster_count = len(cluster_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(cluster_count) + \" cluster counted for: \" + ip_address)\n            cluster_counter = 0\n            #iterate throught the payload into events\n            while cluster_counter < cluster_count:\n                cluster_path = json.loads(cluster_response.text)[cluster_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:cluster\", data=json.dumps(cluster_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: cluster event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: cluster CANNOT write event for: \" + ip_address)\n                cluster_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: cluster could not call api for: \" + ip_address)\n\n\n        #node api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: node beginning data collection for: \" + ip_address)\n            node_url = 'https://' + ip_address + '/api/rest/node?select=*'\n            node_response = requests.get(node_url, auth=HTTPBasicAuth(username, password), verify=False)\n            node_path = json.loads(node_response.text)\n            node_count = len(node_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(node_count) + \" node counted for: \" + ip_address)\n            node_counter = 0\n            #iterate throught the payload into events\n            while node_counter < node_count:\n                node_path = json.loads(node_response.text)[node_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:node\", data=json.dumps(node_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: node event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: node CANNOT write event for: \" + ip_address)\n                node_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: node could not call api for: \" + ip_address)\n\n\n        #hardware api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: hardware beginning data collection for: \" + ip_address)\n            hardware_url = 'https://' + ip_address + '/api/rest/hardware?select=*'\n            hardware_response = requests.get(hardware_url, auth=HTTPBasicAuth(username, password), verify=False)\n            hardware_path = json.loads(hardware_response.text)\n            hardware_count = len(hardware_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(hardware_count) + \" hardware counted for: \" + ip_address)\n            hardware_counter = 0\n            #iterate throught the payload into events\n            while hardware_counter < hardware_count:\n                hardware_path = json.loads(hardware_response.text)[hardware_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:hardware\", data=json.dumps(hardware_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: hardware event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: hardware CANNOT write event for: \" + ip_address)\n                hardware_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: hardware could not call api for: \" + ip_address)\n\n\n        #eth_port api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: eth_port beginning data collection for: \" + ip_address)\n            eth_port_url = 'https://' + ip_address + '/api/rest/eth_port?select=*'\n            eth_port_response = requests.get(eth_port_url, auth=HTTPBasicAuth(username, password), verify=False)\n            eth_port_path = json.loads(eth_port_response.text)\n            eth_port_count = len(eth_port_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(eth_port_count) + \" eth_port counted for: \" + ip_address)\n            eth_port_counter = 0\n            #iterate throught the payload into events\n            while eth_port_counter < eth_port_count:\n                eth_port_path = json.loads(eth_port_response.text)[eth_port_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:eth_port\", data=json.dumps(eth_port_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: eth_port event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: eth_port CANNOT write event for: \" + ip_address)\n                eth_port_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: eth_port could not call api for: \" + ip_address)\n\n\n        #fc_port api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: fc_port beginning data collection for: \" + ip_address)\n            fc_port_url = 'https://' + ip_address + '/api/rest/fc_port?select=*'\n            fc_port_response = requests.get(fc_port_url, auth=HTTPBasicAuth(username, password), verify=False)\n            fc_port_path = json.loads(fc_port_response.text)\n            fc_port_count = len(fc_port_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(fc_port_count) + \" fc_port counted for: \" + ip_address)\n            fc_port_counter = 0\n            #iterate throught the payload into events\n            while fc_port_counter < fc_port_count:\n                fc_port_path = json.loads(fc_port_response.text)[fc_port_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:fc_port\", data=json.dumps(fc_port_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: fc_port event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: fc_port CANNOT write event for: \" + ip_address)\n                fc_port_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: fc_port could not call api for: \" + ip_address)\n\n\n        #sas_port api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: sas_port beginning data collection for: \" + ip_address)\n            sas_port_url = 'https://' + ip_address + '/api/rest/sas_port?select=*'\n            sas_port_response = requests.get(sas_port_url, auth=HTTPBasicAuth(username, password), verify=False)\n            sas_port_path = json.loads(sas_port_response.text)\n            sas_port_count = len(sas_port_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(sas_port_count) + \" sas_port counted for: \" + ip_address)\n            sas_port_counter = 0\n            #iterate throught the payload into events\n            while sas_port_counter < sas_port_count:\n                sas_port_path = json.loads(sas_port_response.text)[sas_port_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:sas_port\", data=json.dumps(sas_port_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: sas_port event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: sas_port CANNOT write event for: \" + ip_address)\n                sas_port_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: sas_port could not call api for: \" + ip_address)\n\n\n        #veth_port api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: veth_port beginning data collection for: \" + ip_address)\n            veth_port_url = 'https://' + ip_address + '/api/rest/veth_port?select=*'\n            veth_port_response = requests.get(veth_port_url, auth=HTTPBasicAuth(username, password), verify=False)\n            veth_port_path = json.loads(veth_port_response.text)\n            veth_port_count = len(veth_port_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(veth_port_count) + \" veth_port counted for: \" + ip_address)\n            veth_port_counter = 0\n            #iterate throught the payload into events\n            while veth_port_counter < veth_port_count:\n                veth_port_path = json.loads(veth_port_response.text)[veth_port_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:veth_port\", data=json.dumps(veth_port_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: veth_port event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: veth_port CANNOT write event for: \" + ip_address)\n                veth_port_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: veth_port could not call api for: \" + ip_address)\n\n\n        #bond api call\n        try:\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: bond beginning data collection for: \" + ip_address)\n            bond_url = 'https://' + ip_address + '/api/rest/bond?select=*'\n            bond_response = requests.get(bond_url, auth=HTTPBasicAuth(username, password), verify=False)\n            bond_path = json.loads(bond_response.text)\n            bond_count = len(bond_path)\n            helper.log_info(\"Dell PowerStore - System_and_Hardware: \" + str(bond_count) + \" bond counted for: \" + ip_address)\n            bond_counter = 0\n            #iterate throught the payload into events\n            while bond_counter < bond_count:\n                bond_path = json.loads(bond_response.text)[bond_counter]\n                try:\n                    event = helper.new_event(host=ip_address, source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=\"dell:powerstore:bond\", data=json.dumps(bond_path), done=True, unbroken=False)\n                    ew.write_event(event)\n                    helper.log_info(\"Dell PowerStore - System_and_Hardware: bond event data created for: \" + ip_address)\n                except:\n                    helper.log_error(\"ERROR Dell PowerStore - System_and_Hardware: bond CANNOT write event for: \" + ip_address)\n                bond_counter += 1\n        except:\n            helper.log_error(\"Dell PowerStore - System_and_Hardware: bond could not call api for: \" + ip_address)\n\n\n################\n# Finishing up #\n################\n    helper.log_info(\"FINISH: Ending collection for: \" + ip_address)\n    end_time = round(time.time()-start,2)\n    helper.log_info(\"FINISH: Collection took: \" + str(end_time) + \" secs to collect data for: \" + ip_address)", "customized_options": [{"name": "ip_address", "value": "192.168.202.60"}, {"name": "global_account", "value": "account0"}, {"name": "compute", "value": true}, {"name": "migration", "value": true}, {"name": "monitoring", "value": true}, {"name": "protection", "value": true}, {"name": "settings", "value": true}, {"name": "storage", "value": true}, {"name": "support", "value": true}, {"name": "system_and_hardware", "value": true}], "uuid": "9d9feee422b14dafbe4a98f203058268", "sample_count": 0}]}, "field_extraction_builder": {"dell:powerstore:alert": {"data_format": "json"}, "dell:powerstore:appliance": {"data_format": "json"}, "dell:powerstore:dns": {"data_format": "json"}, "dell:powerstore:eth_port": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"dell:powerstore": {"metadata": {"event_count": 0, "data_input_name": "dell_powerstore", "extractions_count": 0, "cims_count": 0}}, "dell:powerstore:alert": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "dell:powerstore:appliance": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "dell:powerstore:dns": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "dell:powerstore:eth_port": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}}}