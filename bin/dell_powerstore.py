import ta_dell_emc_powerstore_add_on_for_splunk_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from solnlib.packages.splunklib import modularinput as smi



import input_module_dell_powerstore as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_dell_powerstore.py
'''
class ModInputdell_powerstore(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputdell_powerstore, self).__init__("ta_dell_emc_powerstore_add_on_for_splunk", "dell_powerstore", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputdell_powerstore, self).get_scheme()
        scheme.title = ("dell:powerstore")
        scheme.description = ("Go to the add-on\'s configuration UI and configure modular inputs under the Inputs menu.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("ip_address", title="IP Address",
                                         description="Cluster IP Address of PowerStore",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("global_account", title="Global Account",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("compute", title="Compute",
                                         description="Manage host configurations, virtual machines and VMware integration.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("migration", title="Migration",
                                         description="Manage data import and data migration from remote systems.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("monitoring", title="Monitoring",
                                         description="View event logs and alerts",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("protection", title="Protection",
                                         description="Manage replication and data protection rules",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("settings", title="Settings",
                                         description="Configure general settings on the system including: Networking, Licensing, Updates",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("storage", title="Storage",
                                         description="Storage configuration of the system: Create delete storage resources, Configure NAS servers",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("support", title="Support",
                                         description="Manage service user credentials, perform service actions on the system",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("system_and_hardware", title="System and Hardware",
                                         description="Manage hardware, view component health status, change cluster configuration",
                                         required_on_create=False,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "TA-dell-emc-powerstore-add-on-for-splunk"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        account_fields.append("global_account")
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        checkbox_fields.append("compute")
        checkbox_fields.append("migration")
        checkbox_fields.append("monitoring")
        checkbox_fields.append("protection")
        checkbox_fields.append("settings")
        checkbox_fields.append("storage")
        checkbox_fields.append("support")
        checkbox_fields.append("system_and_hardware")
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputdell_powerstore().run(sys.argv)
    sys.exit(exitcode)
